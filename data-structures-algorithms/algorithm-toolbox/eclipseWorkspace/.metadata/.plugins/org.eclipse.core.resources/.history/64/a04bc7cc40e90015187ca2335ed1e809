//package week_3.fractional_knapsack;

//import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;

public class FractionalKnapsack {
    private static Scanner scanner;

    private static double getOptimalValue(int capacity, int[] values, int[] weights) {
        double value = 0;
        
        int n = values.length, a;
        Float[] vBw = new Float[n];
        
        for (int i = 0; i < n; i++) {
            vBw[i] = (float) (values[i]*1.0/weights[i]);
        }
        
        //Arrays.sort(vBw, Collections.reverseOrder());
        
        Map<Float, Integer> m = new HashMap<Float, Integer>();
        
        for (int i = 0; i < n; i++) {
            m.put(vBw[i], weights[i]);
        }
        
        Map<Float, Integer> newMap = new TreeMap<Float, Integer>(Collections.reverseOrder());
        newMap.putAll(m);
        
        //for(Float key: newMap.keySet()) {
        //    System.out.println(key + " - " + newMap.get(key));
        //}
        
        //for (int i = 0; i < n; i++) {
        for (Float key: newMap.keySet()) {
            if (capacity == 0.0) {
                return value;
            }
            //a = (weights[i] > capacity)?capacity:weights[i];
            a = (newMap.get(key) > capacity)?capacity:newMap.get(key);
            //value = value+a*vBw[i];
            value = value+a*key;
            capacity = capacity-a;
            //System.out.println(capacity + " " + a);
        }
        
        return value;
    }

    public static void main(String args[]) {
        scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int capacity = scanner.nextInt();
        int[] values = new int[n];
        int[] weights = new int[n];
        for (int i = 0; i < n; i++) {
            values[i] = scanner.nextInt();
            weights[i] = scanner.nextInt();
        }
        System.out.println(getOptimalValue(capacity, values, weights));
        //System.out.println((double)Math.round(getOptimalValue(capacity, values, weights)*100000d)/100000d);
    }
} 
