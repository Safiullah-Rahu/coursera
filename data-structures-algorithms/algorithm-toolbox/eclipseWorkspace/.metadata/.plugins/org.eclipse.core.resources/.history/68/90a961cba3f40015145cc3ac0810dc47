package week_5.primitive_calculator;

import java.util.*;

public class PrimitiveCalculator {
    private static List<Integer> optimal_sequence(int n) {
        List<Integer> sequence = new ArrayList<Integer>();
        while (n >= 1) {
            sequence.add(n);
            if (n % 3 == 0) {
                n /= 3;
            } else if (n % 2 == 0) {
                n /= 2;
            } else {
                n -= 1;
            }
        }
        Collections.reverse(sequence);
        return sequence;
    }

    private static List<Integer> dp_sequence(int n) {
        List<Integer> sequence = new ArrayList<Integer>();

        int [] c = new int[n+3];
        
        c[0] = 1;
        
        for (int i = 1; i <= n; i++) {
            if(i%2 == 0) {
                c[i] = c[i/2]+1;
            }
            else if(i%3 == 0) {
                c[i] = c[i/3]+1;
            }
            else {
                c[i] = c[i-1]+1;
            }
        }
        System.out.println(c[n]);
        Collections.reverse(sequence);
        return sequence;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> sequence = dp_sequence(n);
        System.out.println(sequence.size() - 1);
        for (Integer x : sequence) {
            System.out.print(x + " ");
        }
    }
}

