package week_3.fractional_knapsack;

import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;

public class FractionalKnapsack {
    private static Scanner scanner;

    private static double getOptimalValue(int capacity, int[] values, int[] weights) {
        double value = 0;
        
        int n = values.length, a;
        double[] vBw = new double[n];
        
        for (int i = 0; i < n; i++) {
            vBw[i] = values[i]*1.0/weights[i];
        }
        
        Arrays.sort(vBw);
        
        for (int i = 0; i < n; i++) {
            System.out.println(vBw[i]);
        }
        
        for (int i = 0; i < n; i++) {
            if (capacity == 0.0) {
                return value;
            }
            a = (weights[i] > capacity)?capacity:weights[i];
            value = value+a*vBw[i];
            capacity = capacity-a;
            System.out.println(capacity);
        }
        
        return value;
    }

    public static void main(String args[]) {
        scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int capacity = scanner.nextInt();
        int[] values = new int[n];
        int[] weights = new int[n];
        for (int i = 0; i < n; i++) {
            values[i] = scanner.nextInt();
            weights[i] = scanner.nextInt();
        }
        System.out.println(getOptimalValue(capacity, values, weights));
    }
} 
