package week_5.primitive_calculator;

import java.util.*;

public class PrimitiveCalculator {
    private static Scanner scanner;

    private static List<Integer> optimal_sequence(int n) {
        List<Integer> sequence = new ArrayList<Integer>();
        while (n >= 1) {
            sequence.add(n);
            if (n % 3 == 0) {
                n /= 3;
            } else if (n % 2 == 0) {
                n /= 2;
            } else {
                n -= 1;
            }
        }
        Collections.reverse(sequence);
        return sequence;
    }

    private static List<Integer> DPChange(int n) {
        int [] money = new int [n+1];
        money[0] = 0;
        money[1] = 0;
        money[2] = 1;
        money[3] = 1;
        for(int i = 4; i < n; i++) {
            if(i%3 == 0) {
                money[i] = money[i/3]+1;
            }
            else if(i%2 == 0) {
                money[i] = money[i/2]+1;
            }
            else {
                money[i] = money[i-1];
            }
        }
        System.out.println(money[n]);
        List<Integer> sequence = new ArrayList<Integer>();
        Collections.reverse(sequence);
        return sequence;
    }

    public static void main(String[] args) {
        scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        
        List<Integer> sequence = DPChange(n);
        System.out.println(sequence.size() - 1);
        
        //for (Integer x : sequence) {
        //    System.out.print(x + " ");
        //}
    }
}

