package week_5.primitive_calculator;

import java.util.*;

public class PrimitiveCalculator {
    private static List<Integer> optimal_sequence(int n) {
        List<Integer> sequence = new ArrayList<Integer>();
        while (n >= 1) {
            sequence.add(n);
            if (n % 3 == 0) {
                n /= 3;
            } else if (n % 2 == 0) {
                n /= 2;
            } else {
                n -= 1;
            }
        }
        Collections.reverse(sequence);
        return sequence;
    }
    
    static int min(int a, int b) {
        return (a>b)?b:a;
    }
    
    static int min(int a, int b, int c) {
        return min(min(a, b), c);
    }
    
    int C(int n) {
        if (n == 0) {
            return 0;
        }
        else if (n == 1) {
            return 1;
        }
        else {
            return min(C(n/3)+1, C(n/2)+1, C(n-1)+1);
        }
    }
    
    private static List<Integer> dp_sequence(int n) {
        List<Integer> sequence = new ArrayList<Integer>();

        int [] c = new int[n+1];
        int a1 = 100, a2 = 100, a3 = 100;
        c[1] = 1;
        
        for (int i = 2; i <= n; i++) {
            if(i%2 == 0) {
                a1 = c[i/2]+1;
            }
            if(i%3 == 0) {
                a2 = c[i/3]+1;
            }
            a3 = c[i-1]+1;
            c[i] = min(a1, a2, a3);
        }
        System.out.println(c[n]);
        Collections.reverse(sequence);
        return sequence;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        List<Integer> sequence = dp_sequence(n);
        //System.out.println(sequence.size() - 1);
        for (Integer x : sequence) {
            System.out.print(x + " ");
        }
    }
}

